// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Taxi_NET_API.Data;

#nullable disable

namespace TaxiNETAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Taxi_NET_API.Models.CombustionTaxi", b =>
                {
                    b.Property<int>("CombustionTaxiID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CombustionTaxiID"));

                    b.Property<string>("CarBrand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CarDoor")
                        .HasColumnType("int");

                    b.Property<string>("Colour")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FuelType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsGearBox")
                        .HasColumnType("bit");

                    b.Property<int>("ProductionYear")
                        .HasColumnType("int");

                    b.Property<int>("TravelRange")
                        .HasColumnType("int");

                    b.HasKey("CombustionTaxiID");

                    b.ToTable("CombustionTaxis");
                });

            modelBuilder.Entity("Taxi_NET_API.Models.DriverChoice", b =>
                {
                    b.Property<int>("DriverChoiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DriverChoiceID"));

                    b.Property<int>("TaxiDriverID")
                        .HasColumnType("int");

                    b.Property<int>("TripID")
                        .HasColumnType("int");

                    b.HasKey("DriverChoiceID");

                    b.ToTable("DriverChoices");
                });

            modelBuilder.Entity("Taxi_NET_API.Models.ElectricTaxi", b =>
                {
                    b.Property<int>("electricTaxiID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("electricTaxiID"));

                    b.Property<string>("CarBrand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CarDoor")
                        .HasColumnType("int");

                    b.Property<string>("Colour")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsGearBox")
                        .HasColumnType("bit");

                    b.Property<int>("ProductionYear")
                        .HasColumnType("int");

                    b.Property<int>("TravelRange")
                        .HasColumnType("int");

                    b.Property<int>("batteryCapacity")
                        .HasColumnType("int");

                    b.HasKey("electricTaxiID");

                    b.ToTable("ElectricTaxis");
                });

            modelBuilder.Entity("Taxi_NET_API.Models.TaxiAssignment", b =>
                {
                    b.Property<int>("TaxiAssignmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaxiAssignmentID"));

                    b.Property<bool>("IsElectric")
                        .HasColumnType("bit");

                    b.Property<int>("TaxiDriverID")
                        .HasColumnType("int");

                    b.Property<int>("TaxiID")
                        .HasColumnType("int");

                    b.HasKey("TaxiAssignmentID");

                    b.ToTable("TaxiAssignments");
                });

            modelBuilder.Entity("Taxi_NET_API.Models.TaxiDriver", b =>
                {
                    b.Property<int>("TaxiDriverID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaxiDriverID"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<bool>("IsManualLicence")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("XCoordinates")
                        .HasColumnType("float");

                    b.Property<double>("YCoordinates")
                        .HasColumnType("float");

                    b.HasKey("TaxiDriverID");

                    b.ToTable("TaxiDrivers");
                });

            modelBuilder.Entity("Taxi_NET_API.Models.Trip", b =>
                {
                    b.Property<int>("TripID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TripID"));

                    b.Property<double>("XFinishCoordinates")
                        .HasColumnType("float");

                    b.Property<double>("XStartCoordinates")
                        .HasColumnType("float");

                    b.Property<double>("YFinishCoordinates")
                        .HasColumnType("float");

                    b.Property<double>("YStartCoordinates")
                        .HasColumnType("float");

                    b.HasKey("TripID");

                    b.ToTable("Trips");
                });
#pragma warning restore 612, 618
        }
    }
}
